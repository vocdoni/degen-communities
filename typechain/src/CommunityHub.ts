/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICommunityHub {
  export type TokenStruct = {
    blockchain: string;
    contractAddress: AddressLike;
  };

  export type TokenStructOutput = [
    blockchain: string,
    contractAddress: string
  ] & { blockchain: string; contractAddress: string };

  export type CensusStruct = {
    censusType: BigNumberish;
    tokens: ICommunityHub.TokenStruct[];
  };

  export type CensusStructOutput = [
    censusType: bigint,
    tokens: ICommunityHub.TokenStructOutput[]
  ] & { censusType: bigint; tokens: ICommunityHub.TokenStructOutput[] };

  export type CommunityMetadataStruct = {
    name: string;
    imageURI: string;
    channels: string[];
    notifications: boolean;
  };

  export type CommunityMetadataStructOutput = [
    name: string,
    imageURI: string,
    channels: string[],
    notifications: boolean
  ] & {
    name: string;
    imageURI: string;
    channels: string[];
    notifications: boolean;
  };
}

export interface CommunityHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AddCensus"
      | "AddGuardian"
      | "AdminManageCommunity"
      | "CreateCommunity"
      | "DeleteCommunity"
      | "GetElectionResults"
      | "RemoveCensus"
      | "RemoveGuardian"
      | "SetCreateElectionPermission"
      | "SetElectionResults"
      | "SetElectionResultsContract"
      | "SetMetadata"
      | "SetNotifiableElections"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "AddCensus",
    values: [BigNumberish, ICommunityHub.CensusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "AddGuardian",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "AdminManageCommunity",
    values: [
      BigNumberish,
      ICommunityHub.CommunityMetadataStruct,
      ICommunityHub.CensusStruct,
      BigNumberish[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateCommunity",
    values: [
      ICommunityHub.CommunityMetadataStruct,
      ICommunityHub.CensusStruct,
      BigNumberish[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "DeleteCommunity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetElectionResults",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "RemoveCensus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RemoveGuardian",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SetCreateElectionPermission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetElectionResults",
    values: [
      BigNumberish,
      BytesLike,
      string,
      string[],
      string,
      BigNumberish[][],
      BigNumberish,
      string[],
      BytesLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SetElectionResultsContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SetMetadata",
    values: [BigNumberish, ICommunityHub.CommunityMetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "SetNotifiableElections",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "AddCensus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AddGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AdminManageCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DeleteCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetElectionResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveCensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetCreateElectionPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetElectionResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetElectionResultsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetNotifiableElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CommunityHub extends BaseContract {
  connect(runner?: ContractRunner | null): CommunityHub;
  waitForDeployment(): Promise<this>;

  interface: CommunityHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AddCensus: TypedContractMethod<
    [communityId: BigNumberish, census: ICommunityHub.CensusStruct],
    [void],
    "nonpayable"
  >;

  AddGuardian: TypedContractMethod<
    [communityId: BigNumberish, guardian: AddressLike],
    [void],
    "nonpayable"
  >;

  AdminManageCommunity: TypedContractMethod<
    [
      communityId: BigNumberish,
      metadata: ICommunityHub.CommunityMetadataStruct,
      census: ICommunityHub.CensusStruct,
      guardians: BigNumberish[],
      electionResultsContract: AddressLike,
      createElectionPermission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  CreateCommunity: TypedContractMethod<
    [
      metadata: ICommunityHub.CommunityMetadataStruct,
      census: ICommunityHub.CensusStruct,
      guardians: BigNumberish[],
      electionResultsContract: AddressLike,
      createElectionPermission: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  DeleteCommunity: TypedContractMethod<
    [communityId: BigNumberish],
    [void],
    "nonpayable"
  >;

  GetElectionResults: TypedContractMethod<
    [communityId: BigNumberish, electionId: string],
    [
      [
        string,
        string[],
        string,
        bigint[][],
        bigint,
        string[],
        string,
        string,
        string
      ] & {
        question: string;
        options: string[];
        date: string;
        tally: bigint[][];
        turnout: bigint;
        participants: string[];
        action: string;
        censusRoot: string;
        censusURI: string;
      }
    ],
    "view"
  >;

  RemoveCensus: TypedContractMethod<
    [communityId: BigNumberish],
    [void],
    "nonpayable"
  >;

  RemoveGuardian: TypedContractMethod<
    [communityId: BigNumberish, guardian: AddressLike],
    [void],
    "nonpayable"
  >;

  SetCreateElectionPermission: TypedContractMethod<
    [communityId: BigNumberish, createElectionPermission: BigNumberish],
    [void],
    "nonpayable"
  >;

  SetElectionResults: TypedContractMethod<
    [
      communityId: BigNumberish,
      electionId: BytesLike,
      question: string,
      options: string[],
      date: string,
      tally: BigNumberish[][],
      turnout: BigNumberish,
      participants: string[],
      action: BytesLike,
      censusRoot: BytesLike,
      censusURI: string
    ],
    [void],
    "nonpayable"
  >;

  SetElectionResultsContract: TypedContractMethod<
    [communityId: BigNumberish, electionResultsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  SetMetadata: TypedContractMethod<
    [
      communityId: BigNumberish,
      metadata: ICommunityHub.CommunityMetadataStruct
    ],
    [void],
    "nonpayable"
  >;

  SetNotifiableElections: TypedContractMethod<
    [communityId: BigNumberish, notifiableElections: boolean],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AddCensus"
  ): TypedContractMethod<
    [communityId: BigNumberish, census: ICommunityHub.CensusStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "AddGuardian"
  ): TypedContractMethod<
    [communityId: BigNumberish, guardian: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "AdminManageCommunity"
  ): TypedContractMethod<
    [
      communityId: BigNumberish,
      metadata: ICommunityHub.CommunityMetadataStruct,
      census: ICommunityHub.CensusStruct,
      guardians: BigNumberish[],
      electionResultsContract: AddressLike,
      createElectionPermission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "CreateCommunity"
  ): TypedContractMethod<
    [
      metadata: ICommunityHub.CommunityMetadataStruct,
      census: ICommunityHub.CensusStruct,
      guardians: BigNumberish[],
      electionResultsContract: AddressLike,
      createElectionPermission: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "DeleteCommunity"
  ): TypedContractMethod<[communityId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "GetElectionResults"
  ): TypedContractMethod<
    [communityId: BigNumberish, electionId: string],
    [
      [
        string,
        string[],
        string,
        bigint[][],
        bigint,
        string[],
        string,
        string,
        string
      ] & {
        question: string;
        options: string[];
        date: string;
        tally: bigint[][];
        turnout: bigint;
        participants: string[];
        action: string;
        censusRoot: string;
        censusURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "RemoveCensus"
  ): TypedContractMethod<[communityId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "RemoveGuardian"
  ): TypedContractMethod<
    [communityId: BigNumberish, guardian: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetCreateElectionPermission"
  ): TypedContractMethod<
    [communityId: BigNumberish, createElectionPermission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetElectionResults"
  ): TypedContractMethod<
    [
      communityId: BigNumberish,
      electionId: BytesLike,
      question: string,
      options: string[],
      date: string,
      tally: BigNumberish[][],
      turnout: BigNumberish,
      participants: string[],
      action: BytesLike,
      censusRoot: BytesLike,
      censusURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetElectionResultsContract"
  ): TypedContractMethod<
    [communityId: BigNumberish, electionResultsContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetMetadata"
  ): TypedContractMethod<
    [
      communityId: BigNumberish,
      metadata: ICommunityHub.CommunityMetadataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SetNotifiableElections"
  ): TypedContractMethod<
    [communityId: BigNumberish, notifiableElections: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
