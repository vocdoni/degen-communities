/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IElectionResults {
  export type ResultStruct = {
    question: string;
    options: string[];
    date: string;
    tally: BigNumberish[][];
    turnout: BigNumberish;
    totalVotingPower: BigNumberish;
    participants: BigNumberish[];
    censusRoot: BytesLike;
    censusURI: string;
  };

  export type ResultStructOutput = [
    question: string,
    options: string[],
    date: string,
    tally: bigint[][],
    turnout: bigint,
    totalVotingPower: bigint,
    participants: bigint[],
    censusRoot: string,
    censusURI: string
  ] & {
    question: string;
    options: string[];
    date: string;
    tally: bigint[][];
    turnout: bigint;
    totalVotingPower: bigint;
    participants: bigint[];
    censusRoot: string;
    censusURI: string;
  };
}

export interface IElectionResultsInterface extends Interface {
  getFunction(nameOrSignature: "getResult" | "setResult"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ResultsSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "getResult",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResult",
    values: [BigNumberish, BytesLike, IElectionResults.ResultStruct]
  ): string;

  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setResult", data: BytesLike): Result;
}

export namespace ResultsSetEvent {
  export type InputTuple = [communityId: BigNumberish, electionId: BytesLike];
  export type OutputTuple = [communityId: bigint, electionId: string];
  export interface OutputObject {
    communityId: bigint;
    electionId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IElectionResults extends BaseContract {
  connect(runner?: ContractRunner | null): IElectionResults;
  waitForDeployment(): Promise<this>;

  interface: IElectionResultsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getResult: TypedContractMethod<
    [_communityId: BigNumberish, _electionId: BytesLike],
    [IElectionResults.ResultStructOutput],
    "view"
  >;

  setResult: TypedContractMethod<
    [
      _communityId: BigNumberish,
      _electionId: BytesLike,
      _result: IElectionResults.ResultStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<
    [_communityId: BigNumberish, _electionId: BytesLike],
    [IElectionResults.ResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setResult"
  ): TypedContractMethod<
    [
      _communityId: BigNumberish,
      _electionId: BytesLike,
      _result: IElectionResults.ResultStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ResultsSet"
  ): TypedContractEvent<
    ResultsSetEvent.InputTuple,
    ResultsSetEvent.OutputTuple,
    ResultsSetEvent.OutputObject
  >;

  filters: {
    "ResultsSet(uint256,bytes32)": TypedContractEvent<
      ResultsSetEvent.InputTuple,
      ResultsSetEvent.OutputTuple,
      ResultsSetEvent.OutputObject
    >;
    ResultsSet: TypedContractEvent<
      ResultsSetEvent.InputTuple,
      ResultsSetEvent.OutputTuple,
      ResultsSetEvent.OutputObject
    >;
  };
}
