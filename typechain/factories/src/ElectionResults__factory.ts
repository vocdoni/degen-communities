/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ElectionResults,
  ElectionResultsInterface,
} from "../../src/ElectionResults";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "communityId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "electionId",
        type: "bytes32",
      },
    ],
    name: "ResultsSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_communityId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_electionId",
        type: "bytes32",
      },
    ],
    name: "getResult",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "options",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "date",
            type: "string",
          },
          {
            internalType: "uint256[][]",
            name: "tally",
            type: "uint256[][]",
          },
          {
            internalType: "uint256",
            name: "turnout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "bytes32",
            name: "censusRoot",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "censusURI",
            type: "string",
          },
        ],
        internalType: "struct IResult.Result",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_communityId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_electionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "options",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "date",
            type: "string",
          },
          {
            internalType: "uint256[][]",
            name: "tally",
            type: "uint256[][]",
          },
          {
            internalType: "uint256",
            name: "turnout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "bytes32",
            name: "censusRoot",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "censusURI",
            type: "string",
          },
        ],
        internalType: "struct IResult.Result",
        name: "_result",
        type: "tuple",
      },
    ],
    name: "setResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000885760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007f9190620001a9565b60405180910390fd5b6200009981620000a060201b60201c565b50620001c6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001918262000164565b9050919050565b620001a38162000184565b82525050565b6000602082019050620001c0600083018462000198565b92915050565b61192580620001d66000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313e862651461005c5780633c973f751461008c578063715018a6146100a85780638da5cb5b146100b2578063f2fde38b146100d0575b600080fd5b61007660048036038101906100719190610b2a565b6100ec565b6040516100839190610f33565b60405180910390f35b6100a660048036038101906100a191906114a6565b6104d0565b005b6100b0610679565b005b6100ba61068d565b6040516100c79190611556565b60405180910390f35b6100ea60048036038101906100e5919061159d565b6106b6565b005b6100f461088f565b60016000848152602001908152602001600020600083815260200190815260200160002060405180610120016040529081600082018054610134906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610160906115f9565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156102875783829060005260206000200180546101fa906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610226906115f9565b80156102735780601f1061024857610100808354040283529160200191610273565b820191906000526020600020905b81548152906001019060200180831161025657829003601f168201915b5050505050815260200190600101906101db565b50505050815260200160028201805461029f906115f9565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb906115f9565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156103b8578382906000526020600020018054806020026020016040519081016040528092919081815260200182805480156103a457602002820191906000526020600020905b815481526020019060010190808311610390575b505050505081526020019060010190610346565b50505050815260200160048201548152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561042357602002820191906000526020600020905b81548152602001906001019080831161040f575b5050505050815260200160078201548152602001600882018054610446906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610472906115f9565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b505050505081525050905092915050565b6104d861073c565b6104e061088f565b8160000151816000018190525081602001518160200181905250816040015181604001819052508160600151816060018190525081608001518160800181815250508160a001518160a00181815250508160c001518160c001819052508160e001518160e001818152505081610100015181610100018190525080600160008681526020019081526020016000206000858152602001908152602001600020600082015181600001908161059491906117d6565b5060208201518160010190805190602001906105b19291906108de565b5060408201518160020190816105c791906117d6565b5060608201518160030190805190602001906105e4929190610937565b506080820151816004015560a0820151816005015560c0820151816006019080519060200190610615929190610997565b5060e0820151816007015561010082015181600801908161063691906117d6565b509050507f77deb32519991dda7821b0b9367f9124aa3fd934f4845bcfd5dc6fa3f1922663848460405161066b9291906118c6565b60405180910390a150505050565b61068161073c565b61068b60006107c3565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106be61073c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107305760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107279190611556565b60405180910390fd5b610739816107c3565b50565b610744610887565b73ffffffffffffffffffffffffffffffffffffffff1661076261068d565b73ffffffffffffffffffffffffffffffffffffffff16146107c157610785610887565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107b89190611556565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518061012001604052806060815260200160608152602001606081526020016060815260200160008152602001600081526020016060815260200160008019168152602001606081525090565b828054828255906000526020600020908101928215610926579160200282015b8281111561092557825182908161091591906117d6565b50916020019190600101906108fe565b5b50905061093391906109e4565b5090565b828054828255906000526020600020908101928215610986579160200282015b82811115610985578251829080519060200190610975929190610997565b5091602001919060010190610957565b5b5090506109939190610a08565b5090565b8280548282559060005260206000209081019282156109d3579160200282015b828111156109d25782518255916020019190600101906109b7565b5b5090506109e09190610a2c565b5090565b5b80821115610a0457600081816109fb9190610a49565b506001016109e5565b5090565b5b80821115610a285760008181610a1f9190610a89565b50600101610a09565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b508054610a55906115f9565b6000825580601f10610a675750610a86565b601f016020900490600052602060002090810190610a859190610a2c565b5b50565b5080546000825590600052602060002090810190610aa79190610a2c565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ad181610abe565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b6000819050919050565b610b0781610af4565b8114610b1257600080fd5b50565b600081359050610b2481610afe565b92915050565b60008060408385031215610b4157610b40610ab4565b5b6000610b4f85828601610adf565b9250506020610b6085828601610b15565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ba4578082015181840152602081019050610b89565b60008484015250505050565b6000601f19601f8301169050919050565b6000610bcc82610b6a565b610bd68185610b75565b9350610be6818560208601610b86565b610bef81610bb0565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610c328383610bc1565b905092915050565b6000602082019050919050565b6000610c5282610bfa565b610c5c8185610c05565b935083602082028501610c6e85610c16565b8060005b85811015610caa5784840389528151610c8b8582610c26565b9450610c9683610c3a565b925060208a01995050600181019050610c72565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d1d81610abe565b82525050565b6000610d2f8383610d14565b60208301905092915050565b6000602082019050919050565b6000610d5382610ce8565b610d5d8185610cf3565b9350610d6883610d04565b8060005b83811015610d99578151610d808882610d23565b9750610d8b83610d3b565b925050600181019050610d6c565b5085935050505092915050565b6000610db28383610d48565b905092915050565b6000602082019050919050565b6000610dd282610cbc565b610ddc8185610cc7565b935083602082028501610dee85610cd8565b8060005b85811015610e2a5784840389528151610e0b8582610da6565b9450610e1683610dba565b925060208a01995050600181019050610df2565b50829750879550505050505092915050565b610e4581610af4565b82525050565b6000610120830160008301518482036000860152610e698282610bc1565b91505060208301518482036020860152610e838282610c47565b91505060408301518482036040860152610e9d8282610bc1565b91505060608301518482036060860152610eb78282610dc7565b9150506080830151610ecc6080860182610d14565b5060a0830151610edf60a0860182610d14565b5060c083015184820360c0860152610ef78282610d48565b91505060e0830151610f0c60e0860182610e3c565b50610100830151848203610100860152610f268282610bc1565b9150508091505092915050565b60006020820190508181036000830152610f4d8184610e4b565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f9282610bb0565b810181811067ffffffffffffffff82111715610fb157610fb0610f5a565b5b80604052505050565b6000610fc4610aaa565b9050610fd08282610f89565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610fff57610ffe610f5a565b5b61100882610bb0565b9050602081019050919050565b82818337600083830152505050565b600061103761103284610fe4565b610fba565b90508281526020810184848401111561105357611052610fdf565b5b61105e848285611015565b509392505050565b600082601f83011261107b5761107a610fda565b5b813561108b848260208601611024565b91505092915050565b600067ffffffffffffffff8211156110af576110ae610f5a565b5b602082029050602081019050919050565b600080fd5b60006110d86110d384611094565b610fba565b905080838252602082019050602084028301858111156110fb576110fa6110c0565b5b835b8181101561114257803567ffffffffffffffff8111156111205761111f610fda565b5b80860161112d8982611066565b855260208501945050506020810190506110fd565b5050509392505050565b600082601f83011261116157611160610fda565b5b81356111718482602086016110c5565b91505092915050565b600067ffffffffffffffff82111561119557611194610f5a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111c1576111c0610f5a565b5b602082029050602081019050919050565b60006111e56111e0846111a6565b610fba565b90508083825260208201905060208402830185811115611208576112076110c0565b5b835b81811015611231578061121d8882610adf565b84526020840193505060208101905061120a565b5050509392505050565b600082601f8301126112505761124f610fda565b5b81356112608482602086016111d2565b91505092915050565b600061127c6112778461117a565b610fba565b9050808382526020820190506020840283018581111561129f5761129e6110c0565b5b835b818110156112e657803567ffffffffffffffff8111156112c4576112c3610fda565b5b8086016112d1898261123b565b855260208501945050506020810190506112a1565b5050509392505050565b600082601f83011261130557611304610fda565b5b8135611315848260208601611269565b91505092915050565b6000610120828403121561133557611334610f55565b5b611340610120610fba565b9050600082013567ffffffffffffffff8111156113605761135f610fd5565b5b61136c84828501611066565b600083015250602082013567ffffffffffffffff8111156113905761138f610fd5565b5b61139c8482850161114c565b602083015250604082013567ffffffffffffffff8111156113c0576113bf610fd5565b5b6113cc84828501611066565b604083015250606082013567ffffffffffffffff8111156113f0576113ef610fd5565b5b6113fc848285016112f0565b606083015250608061141084828501610adf565b60808301525060a061142484828501610adf565b60a08301525060c082013567ffffffffffffffff81111561144857611447610fd5565b5b6114548482850161123b565b60c08301525060e061146884828501610b15565b60e08301525061010082013567ffffffffffffffff81111561148d5761148c610fd5565b5b61149984828501611066565b6101008301525092915050565b6000806000606084860312156114bf576114be610ab4565b5b60006114cd86828701610adf565b93505060206114de86828701610b15565b925050604084013567ffffffffffffffff8111156114ff576114fe610ab9565b5b61150b8682870161131e565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061154082611515565b9050919050565b61155081611535565b82525050565b600060208201905061156b6000830184611547565b92915050565b61157a81611535565b811461158557600080fd5b50565b60008135905061159781611571565b92915050565b6000602082840312156115b3576115b2610ab4565b5b60006115c184828501611588565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061161157607f821691505b602082108103611624576116236115ca565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261168c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261164f565b611696868361164f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116d36116ce6116c984610abe565b6116ae565b610abe565b9050919050565b6000819050919050565b6116ed836116b8565b6117016116f9826116da565b84845461165c565b825550505050565b600090565b611716611709565b6117218184846116e4565b505050565b5b818110156117455761173a60008261170e565b600181019050611727565b5050565b601f82111561178a5761175b8161162a565b6117648461163f565b81016020851015611773578190505b61178761177f8561163f565b830182611726565b50505b505050565b600082821c905092915050565b60006117ad6000198460080261178f565b1980831691505092915050565b60006117c6838361179c565b9150826002028217905092915050565b6117df82610b6a565b67ffffffffffffffff8111156117f8576117f7610f5a565b5b61180282546115f9565b61180d828285611749565b600060209050601f831160018114611840576000841561182e578287015190505b61183885826117ba565b8655506118a0565b601f19841661184e8661162a565b60005b8281101561187657848901518255600182019150602085019450602081019050611851565b86831015611893578489015161188f601f89168261179c565b8355505b6001600288020188555050505b505050505050565b6118b181610abe565b82525050565b6118c081610af4565b82525050565b60006040820190506118db60008301856118a8565b6118e860208301846118b7565b939250505056fea26469706673582212209a9d83a4778645a3a6af1b4ee73bb143d9b7fe8e111980b8a444ef84b422cf4164736f6c63430008180033";

type ElectionResultsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ElectionResultsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ElectionResults__factory extends ContractFactory {
  constructor(...args: ElectionResultsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ElectionResults & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ElectionResults__factory {
    return super.connect(runner) as ElectionResults__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ElectionResultsInterface {
    return new Interface(_abi) as ElectionResultsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ElectionResults {
    return new Contract(address, _abi, runner) as unknown as ElectionResults;
  }
}
