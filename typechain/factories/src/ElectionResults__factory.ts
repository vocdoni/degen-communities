/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ElectionResults,
  ElectionResultsInterface,
} from "../../src/ElectionResults";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "communityId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "electionId",
        type: "bytes32",
      },
    ],
    name: "ResultsSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "communityId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "electionId",
        type: "bytes32",
      },
    ],
    name: "getResult",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "options",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "date",
            type: "string",
          },
          {
            internalType: "uint256[][]",
            name: "tally",
            type: "uint256[][]",
          },
          {
            internalType: "uint256",
            name: "turnout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "participants",
            type: "string[]",
          },
          {
            internalType: "bytes32",
            name: "censusRoot",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "censusURI",
            type: "string",
          },
        ],
        internalType: "struct IElectionResults.Result",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "communityId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "electionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "string",
            name: "question",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "options",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "date",
            type: "string",
          },
          {
            internalType: "uint256[][]",
            name: "tally",
            type: "uint256[][]",
          },
          {
            internalType: "uint256",
            name: "turnout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "participants",
            type: "string[]",
          },
          {
            internalType: "bytes32",
            name: "censusRoot",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "censusURI",
            type: "string",
          },
        ],
        internalType: "struct IElectionResults.Result",
        name: "result",
        type: "tuple",
      },
    ],
    name: "setResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000885760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200007f9190620001a9565b60405180910390fd5b6200009981620000a060201b60201c565b50620001c6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001918262000164565b9050919050565b620001a38162000184565b82525050565b6000602082019050620001c0600083018462000198565b92915050565b61192d80620001d66000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313e862651461005c578063715018a61461008c5780638da5cb5b14610096578063c99d36f3146100b4578063f2fde38b146100d0575b600080fd5b61007660048036038101906100719190610b32565b6100ec565b6040516100839190610f3b565b60405180910390f35b610094610551565b005b61009e610565565b6040516100ab9190610f9e565b60405180910390f35b6100ce60048036038101906100c9919061150a565b61058e565b005b6100ea60048036038101906100e591906115a5565b6106be565b005b6100f4610897565b6001600084815260200190815260200160002060008381526020019081526020016000206040518061012001604052908160008201805461013490611601565b80601f016020809104026020016040519081016040528092919081815260200182805461016090611601565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156102875783829060005260206000200180546101fa90611601565b80601f016020809104026020016040519081016040528092919081815260200182805461022690611601565b80156102735780601f1061024857610100808354040283529160200191610273565b820191906000526020600020905b81548152906001019060200180831161025657829003601f168201915b5050505050815260200190600101906101db565b50505050815260200160028201805461029f90611601565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb90611601565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156103b8578382906000526020600020018054806020026020016040519081016040528092919081815260200182805480156103a457602002820191906000526020600020905b815481526020019060010190808311610390575b505050505081526020019060010190610346565b505050508152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156104a557838290600052602060002001805461041890611601565b80601f016020809104026020016040519081016040528092919081815260200182805461044490611601565b80156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b5050505050815260200190600101906103f9565b505050508152602001600782015481526020016008820180546104c790611601565b80601f01602080910402602001604051908101604052809291908181526020018280546104f390611601565b80156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050505081525050905092915050565b610559610744565b61056360006107cb565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610596610744565b6000600160008581526020019081526020016000206000848152602001908152602001600020905081600001518160000190816105d391906117de565b5081602001518160010190805190602001906105f09291906108e6565b50816040015181600201908161060691906117de565b50816060015181600301908051906020019061062392919061093f565b50816080015181600401819055508160a0015181600501819055508160c0015181600601908051906020019061065a9291906108e6565b508160e00151816007018190555081610100015181600801908161067e91906117de565b507f77deb32519991dda7821b0b9367f9124aa3fd934f4845bcfd5dc6fa3f192266384846040516106b09291906118ce565b60405180910390a150505050565b6106c6610744565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107385760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161072f9190610f9e565b60405180910390fd5b610741816107cb565b50565b61074c61088f565b73ffffffffffffffffffffffffffffffffffffffff1661076a610565565b73ffffffffffffffffffffffffffffffffffffffff16146107c95761078d61088f565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107c09190610f9e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518061012001604052806060815260200160608152602001606081526020016060815260200160008152602001600081526020016060815260200160008019168152602001606081525090565b82805482825590600052602060002090810192821561092e579160200282015b8281111561092d57825182908161091d91906117de565b5091602001919060010190610906565b5b50905061093b919061099f565b5090565b82805482825590600052602060002090810192821561098e579160200282015b8281111561098d57825182908051906020019061097d9291906109c3565b509160200191906001019061095f565b5b50905061099b9190610a10565b5090565b5b808211156109bf57600081816109b69190610a34565b506001016109a0565b5090565b8280548282559060005260206000209081019282156109ff579160200282015b828111156109fe5782518255916020019190600101906109e3565b5b509050610a0c9190610a74565b5090565b5b80821115610a305760008181610a279190610a91565b50600101610a11565b5090565b508054610a4090611601565b6000825580601f10610a525750610a71565b601f016020900490600052602060002090810190610a709190610a74565b5b50565b5b80821115610a8d576000816000905550600101610a75565b5090565b5080546000825590600052602060002090810190610aaf9190610a74565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ad981610ac6565b8114610ae457600080fd5b50565b600081359050610af681610ad0565b92915050565b6000819050919050565b610b0f81610afc565b8114610b1a57600080fd5b50565b600081359050610b2c81610b06565b92915050565b60008060408385031215610b4957610b48610abc565b5b6000610b5785828601610ae7565b9250506020610b6885828601610b1d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bac578082015181840152602081019050610b91565b60008484015250505050565b6000601f19601f8301169050919050565b6000610bd482610b72565b610bde8185610b7d565b9350610bee818560208601610b8e565b610bf781610bb8565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610c3a8383610bc9565b905092915050565b6000602082019050919050565b6000610c5a82610c02565b610c648185610c0d565b935083602082028501610c7685610c1e565b8060005b85811015610cb25784840389528151610c938582610c2e565b9450610c9e83610c42565b925060208a01995050600181019050610c7a565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d2581610ac6565b82525050565b6000610d378383610d1c565b60208301905092915050565b6000602082019050919050565b6000610d5b82610cf0565b610d658185610cfb565b9350610d7083610d0c565b8060005b83811015610da1578151610d888882610d2b565b9750610d9383610d43565b925050600181019050610d74565b5085935050505092915050565b6000610dba8383610d50565b905092915050565b6000602082019050919050565b6000610dda82610cc4565b610de48185610ccf565b935083602082028501610df685610ce0565b8060005b85811015610e325784840389528151610e138582610dae565b9450610e1e83610dc2565b925060208a01995050600181019050610dfa565b50829750879550505050505092915050565b610e4d81610afc565b82525050565b6000610120830160008301518482036000860152610e718282610bc9565b91505060208301518482036020860152610e8b8282610c4f565b91505060408301518482036040860152610ea58282610bc9565b91505060608301518482036060860152610ebf8282610dcf565b9150506080830151610ed46080860182610d1c565b5060a0830151610ee760a0860182610d1c565b5060c083015184820360c0860152610eff8282610c4f565b91505060e0830151610f1460e0860182610e44565b50610100830151848203610100860152610f2e8282610bc9565b9150508091505092915050565b60006020820190508181036000830152610f558184610e53565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8882610f5d565b9050919050565b610f9881610f7d565b82525050565b6000602082019050610fb36000830184610f8f565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ff682610bb8565b810181811067ffffffffffffffff8211171561101557611014610fbe565b5b80604052505050565b6000611028610ab2565b90506110348282610fed565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561106357611062610fbe565b5b61106c82610bb8565b9050602081019050919050565b82818337600083830152505050565b600061109b61109684611048565b61101e565b9050828152602081018484840111156110b7576110b6611043565b5b6110c2848285611079565b509392505050565b600082601f8301126110df576110de61103e565b5b81356110ef848260208601611088565b91505092915050565b600067ffffffffffffffff82111561111357611112610fbe565b5b602082029050602081019050919050565b600080fd5b600061113c611137846110f8565b61101e565b9050808382526020820190506020840283018581111561115f5761115e611124565b5b835b818110156111a657803567ffffffffffffffff8111156111845761118361103e565b5b80860161119189826110ca565b85526020850194505050602081019050611161565b5050509392505050565b600082601f8301126111c5576111c461103e565b5b81356111d5848260208601611129565b91505092915050565b600067ffffffffffffffff8211156111f9576111f8610fbe565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561122557611224610fbe565b5b602082029050602081019050919050565b60006112496112448461120a565b61101e565b9050808382526020820190506020840283018581111561126c5761126b611124565b5b835b8181101561129557806112818882610ae7565b84526020840193505060208101905061126e565b5050509392505050565b600082601f8301126112b4576112b361103e565b5b81356112c4848260208601611236565b91505092915050565b60006112e06112db846111de565b61101e565b9050808382526020820190506020840283018581111561130357611302611124565b5b835b8181101561134a57803567ffffffffffffffff8111156113285761132761103e565b5b808601611335898261129f565b85526020850194505050602081019050611305565b5050509392505050565b600082601f8301126113695761136861103e565b5b81356113798482602086016112cd565b91505092915050565b6000610120828403121561139957611398610fb9565b5b6113a461012061101e565b9050600082013567ffffffffffffffff8111156113c4576113c3611039565b5b6113d0848285016110ca565b600083015250602082013567ffffffffffffffff8111156113f4576113f3611039565b5b611400848285016111b0565b602083015250604082013567ffffffffffffffff81111561142457611423611039565b5b611430848285016110ca565b604083015250606082013567ffffffffffffffff81111561145457611453611039565b5b61146084828501611354565b606083015250608061147484828501610ae7565b60808301525060a061148884828501610ae7565b60a08301525060c082013567ffffffffffffffff8111156114ac576114ab611039565b5b6114b8848285016111b0565b60c08301525060e06114cc84828501610b1d565b60e08301525061010082013567ffffffffffffffff8111156114f1576114f0611039565b5b6114fd848285016110ca565b6101008301525092915050565b60008060006060848603121561152357611522610abc565b5b600061153186828701610ae7565b935050602061154286828701610b1d565b925050604084013567ffffffffffffffff81111561156357611562610ac1565b5b61156f86828701611382565b9150509250925092565b61158281610f7d565b811461158d57600080fd5b50565b60008135905061159f81611579565b92915050565b6000602082840312156115bb576115ba610abc565b5b60006115c984828501611590565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061161957607f821691505b60208210810361162c5761162b6115d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611657565b61169e8683611657565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116db6116d66116d184610ac6565b6116b6565b610ac6565b9050919050565b6000819050919050565b6116f5836116c0565b611709611701826116e2565b848454611664565b825550505050565b600090565b61171e611711565b6117298184846116ec565b505050565b5b8181101561174d57611742600082611716565b60018101905061172f565b5050565b601f8211156117925761176381611632565b61176c84611647565b8101602085101561177b578190505b61178f61178785611647565b83018261172e565b50505b505050565b600082821c905092915050565b60006117b560001984600802611797565b1980831691505092915050565b60006117ce83836117a4565b9150826002028217905092915050565b6117e782610b72565b67ffffffffffffffff811115611800576117ff610fbe565b5b61180a8254611601565b611815828285611751565b600060209050601f8311600181146118485760008415611836578287015190505b61184085826117c2565b8655506118a8565b601f19841661185686611632565b60005b8281101561187e57848901518255600182019150602085019450602081019050611859565b8683101561189b5784890151611897601f8916826117a4565b8355505b6001600288020188555050505b505050505050565b6118b981610ac6565b82525050565b6118c881610afc565b82525050565b60006040820190506118e360008301856118b0565b6118f060208301846118bf565b939250505056fea2646970667358221220cf16530bd3a85612285a86f2c0699c1e5dfbcd1e1e355fb18850fed4cd0a2b7964736f6c63430008180033";

type ElectionResultsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ElectionResultsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ElectionResults__factory extends ContractFactory {
  constructor(...args: ElectionResultsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ElectionResults & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ElectionResults__factory {
    return super.connect(runner) as ElectionResults__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ElectionResultsInterface {
    return new Interface(_abi) as ElectionResultsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ElectionResults {
    return new Contract(address, _abi, runner) as unknown as ElectionResults;
  }
}
